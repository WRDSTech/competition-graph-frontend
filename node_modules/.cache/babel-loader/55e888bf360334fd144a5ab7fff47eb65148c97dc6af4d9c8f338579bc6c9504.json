{"ast":null,"code":"/** Company Competition Graph API\r\n * Get Graph /api/comp/surrounding\r\n */\n\n// const COMPANY_GRAPH_API = '/graph/api/comp/surrounding'\n\nconst COMPANY_GRAPH_API = 'http://backend_app:8000/api/comp/surrounding';\nexport async function getCompanyGraph(nodeId, expandLayers, comp, prod, other, unkown) {\n  try {\n    const response = await fetch(`${COMPANY_GRAPH_API}?node_id=${nodeId}&expand_number_of_layers=${expandLayers}`);\n    // const response = await fetch(`${COMPANY_GRAPH_API}`)\n    const data = await response.json();\n    const nodeset = new Set();\n    if (data && data.links && data.nodes) {\n      let len = data.links.length;\n      for (let i = 0; i < len; i++) {\n        let flag = false;\n        if (comp !== 'true' && data.links[i].category === 'competition') {\n          flag = true;\n        }\n        if (prod !== 'true' && data.links[i].category === 'prodcut') {\n          flag = true;\n        }\n        if (other !== 'true' && data.links[i].category === 'other') {\n          flag = true;\n        }\n        if (unkown !== 'true' && data.links[i].category === 'unknown') {\n          flag = true;\n        }\n        if (flag) {\n          data.links.splice(i, 1);\n          i = i - 1;\n          len = len - 1;\n        } else {\n          nodeset.add(data.links[i].source);\n          nodeset.add(data.links[i].target);\n        }\n      }\n      let lennode = data.nodes.length;\n      for (let i = 0; i < lennode; i++) {\n        if (!nodeset.has(data.nodes[i].id)) {\n          data.nodes.splice(i, 1);\n          i = i - 1;\n          lennode = lennode - 1;\n        }\n      }\n      return data;\n    } else {\n      return null;\n    }\n  } catch (e) {\n    console.error(e);\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}