{"ast":null,"code":"import { use } from 'echarts/core';\nimport { CanvasRenderer } from 'echarts/renderers';\nimport { GraphChart } from 'echarts/charts';\nimport { TitleComponent, TooltipComponent, LegendComponent } from 'echarts/components';\nimport VChart, { THEME_KEY } from 'vue-echarts';\nimport { ref, defineComponent } from 'vue';\nimport dow30SampleGraph from '@/assets/data/dow30_relation_backend.json';\nimport sp500SampleGraph from '@/assets/data/sp500_relation_backend.json';\nimport { getCompanyGraph } from '../api/company-graph';\nuse([CanvasRenderer, GraphChart, TitleComponent, TooltipComponent, LegendComponent]);\nexport default defineComponent({\n  name: 'PartialGraph',\n  components: {\n    VChart\n  },\n  provide: {\n    [THEME_KEY]: 'dark'\n  },\n  watch: {\n    searchTerm() {\n      const matchingNodes = this.useGraph.nodes.filter(node => node.name === this.searchTerm);\n      console.log(matchingNodes);\n      const vchart = this.$refs.vchart;\n      // const nodeData = chart.getOption().series[0].data.find(data => data.id === nodeId);\n\n      if (matchingNodes.length > 0) {\n        const nodeIds = matchingNodes.map(node => node.id);\n        vchart.dispatchAction({\n          type: 'highlight',\n          seriesIndex: 0,\n          nodeIds\n        });\n        // vchart.dispatchAction({\n        //   type: 'dataZoom',\n        //   dataZoomId: 'dataZoomX',\n        //   startValue: xValue - 50, // or any other value that centers the node\n        //   endValue: xValue + 50\n        // })\n      } else {\n        vchart.dispatchAction({\n          type: 'downplay',\n          seriesIndex: 0\n        });\n      }\n    }\n  },\n  methods: {\n    handleChartReady(chartInstance) {\n      chartInstance.on('click', this.handleNodeClick);\n      console.log(1);\n    },\n    handleNodeClick(params) {\n      // Handle the node click event here\n      console.log('Node clicked:', params.data);\n    }\n  },\n  data() {\n    return {\n      dow30SampleGraph,\n      sp500SampleGraph,\n      searchTerm: '',\n      defaultGraphs: {\n        SP500: sp500SampleGraph,\n        DOW30: dow30SampleGraph\n      },\n      useGraph: null,\n      edgeColors: [{\n        name: 'competition',\n        color: 'red'\n      }, {\n        name: 'unknown',\n        color: 'black'\n      }],\n      edgeColorMap: {\n        unknown: 'lightgrey',\n        other: 'lightgrey',\n        competition: 'black'\n      },\n      chart: null,\n      toEmphasize: ['MSFT', 'ZOOM', 'INTC', 'IBM', 'CSCO']\n    };\n  },\n  async created() {\n    try {\n      const graph = await getCompanyGraph(this.$route.params.id, this.$route.params.layers);\n      if (graph && graph.links && graph.nodes) {\n        console.log(graph);\n        // graphType = graphType && this.defaultGraphs[graphType.toUpperCase()]\n        //   ? this.$route.params.graphType\n        //   : 'DOW30'\n        const useGraph = graph;\n        this.useGraph = useGraph;\n        const nodeLinks = useGraph.links.sort((a, b) => {\n          const sourceIdA = parseInt(a.source);\n          const sourceIdB = parseInt(b.source);\n          if (sourceIdA < sourceIdB) {\n            return -1;\n          } else if (sourceIdA > sourceIdB) {\n            return 1;\n          } else {\n            return 0;\n          }\n        });\n        const linkCount = {};\n        nodeLinks.forEach(link => {\n          if (!linkCount[link.source]) {\n            linkCount[link.source] = 1;\n          } else {\n            linkCount[link.source] += 1;\n          }\n        });\n        const nodes = useGraph.nodes.map(node => {\n          let size = 10;\n          if (linkCount[node.id] > 10) {\n            size = linkCount[node.id];\n          }\n          if (this.toEmphasize.includes(node.name)) {\n            return {\n              id: node.id,\n              name: node.name,\n              symbolSize: size,\n              emphasized: true,\n              itemStyle: {\n                borderWidth: 4,\n                borderColor: 'red'\n              },\n              label: {\n                fontSize: '18px',\n                fontWeight: 'bolder'\n              }\n            };\n          } else {\n            return {\n              id: node.id,\n              name: node.name,\n              symbolSize: size\n            };\n          }\n        });\n        // const nodes = useGraph.nodes\n        const links = useGraph.links.map(link => {\n          return {\n            id: link.id,\n            category: link.category,\n            source: link.source,\n            target: link.target,\n            lineStyle: {\n              color: this.edgeColorMap[link.category],\n              width: 2\n            },\n            label: {\n              color: this.edgeColorMap[link.category]\n            }\n          };\n        });\n        const option = ref({\n          backgroundColor: '#fff',\n          title: {\n            text: 'Company Relations',\n            subtext: 'See how companies relate with each other',\n            top: 'top',\n            left: 'center',\n            color: '#000'\n          },\n          tooltip: {},\n          animationDuration: 150,\n          animationEasingUpdate: 'quinticInOut',\n          series: [{\n            name: 'sample',\n            type: 'graph',\n            layout: 'force',\n            force: {\n              // 力引导布局相关的配置项\n              repulsion: 80,\n              // 节点之间的斥力因子\n              gravity: 0.02,\n              // 节点受到的向中心的引力因子 越大越往中心靠拢\n              edgeLength: 240,\n              // 边的两个节点之间的距离\n              layoutAnimation: false // 显示布局的迭代动画\n            },\n\n            focusNodeAdjacency: true,\n            edgeSymbol: ['none', 'none'],\n            data: nodes,\n            links,\n            roam: true,\n            label: {\n              color: '#000',\n              show: true,\n              position: 'right',\n              formatter: '{b}'\n            },\n            edgeLabel: {\n              // 边的设置\n              show: true,\n              position: 'middle',\n              fontSize: 12,\n              formatter: params => {\n                return params.data.category;\n              }\n            },\n            lineStyle: {\n              color: 'source',\n              curveness: 0.3\n            },\n            emphasis: {\n              focus: 'adjacency',\n              lineStyle: {\n                width: 10\n              }\n            }\n          }]\n        });\n        this.chart = option;\n        // this.chart.on('click', (params) => {\n        //   // Handle the node click event here\n        //   console.log('Node clicked:', params)\n        // })\n      } else {\n        console.log('Invalid graph data');\n      }\n    } catch (error) {\n      console.error('Error fetching company graph:', error);\n    }\n  },\n  // const graph = null\n  mounted() {\n    this.$nextTick(() => {\n      const vchart = this.$refs.vchart;\n      vchart.chart.on('click', this.handleNodeClick);\n    });\n  }\n  // mounted () {\n  //   const vchart = this.$refs.vchart\n  // }\n});","map":{"version":3,"names":["use","CanvasRenderer","GraphChart","TitleComponent","TooltipComponent","LegendComponent","VChart","THEME_KEY","ref","defineComponent","dow30SampleGraph","sp500SampleGraph","getCompanyGraph","name","components","provide","watch","searchTerm","matchingNodes","useGraph","nodes","filter","node","console","log","vchart","$refs","length","nodeIds","map","id","dispatchAction","type","seriesIndex","methods","handleChartReady","chartInstance","on","handleNodeClick","params","data","defaultGraphs","SP500","DOW30","edgeColors","color","edgeColorMap","unknown","other","competition","chart","toEmphasize","created","graph","$route","layers","links","nodeLinks","sort","a","b","sourceIdA","parseInt","source","sourceIdB","linkCount","forEach","link","size","includes","symbolSize","emphasized","itemStyle","borderWidth","borderColor","label","fontSize","fontWeight","category","target","lineStyle","width","option","backgroundColor","title","text","subtext","top","left","tooltip","animationDuration","animationEasingUpdate","series","layout","force","repulsion","gravity","edgeLength","layoutAnimation","focusNodeAdjacency","edgeSymbol","roam","show","position","formatter","edgeLabel","curveness","emphasis","focus","error","mounted","$nextTick"],"sources":["src/components/PartialGraph.vue"],"sourcesContent":["<template>\n  <div class=\"chart-container\">\n    <el-input class=\"graphSearch\" v-model=\"searchTerm\" placeholder=\"Search for node\"></el-input>\n    <v-chart ref=\"vchart\" class=\"chart\" :option=\"chart\" />\n  </div>\n</template>\n\n<script>\nimport { use } from 'echarts/core'\nimport { CanvasRenderer } from 'echarts/renderers'\nimport { GraphChart } from 'echarts/charts'\nimport {\n  TitleComponent,\n  TooltipComponent,\n  LegendComponent\n} from 'echarts/components'\nimport VChart, { THEME_KEY } from 'vue-echarts'\nimport { ref, defineComponent } from 'vue'\nimport dow30SampleGraph from '@/assets/data/dow30_relation_backend.json'\nimport sp500SampleGraph from '@/assets/data/sp500_relation_backend.json'\nimport { getCompanyGraph } from '../api/company-graph'\n\nuse([\n  CanvasRenderer,\n  GraphChart,\n  TitleComponent,\n  TooltipComponent,\n  LegendComponent\n])\n\nexport default defineComponent({\n  name: 'PartialGraph',\n  components: {\n    VChart\n  },\n  provide: {\n    [THEME_KEY]: 'dark'\n  },\n  watch: {\n    searchTerm () {\n      const matchingNodes = this.useGraph.nodes.filter(\n        node => node.name === this.searchTerm\n      )\n      console.log(matchingNodes)\n      const vchart = this.$refs.vchart\n      // const nodeData = chart.getOption().series[0].data.find(data => data.id === nodeId);\n\n      if (matchingNodes.length > 0) {\n        const nodeIds = matchingNodes.map(node => node.id)\n        vchart.dispatchAction({\n          type: 'highlight',\n          seriesIndex: 0,\n          nodeIds\n        })\n        // vchart.dispatchAction({\n        //   type: 'dataZoom',\n        //   dataZoomId: 'dataZoomX',\n        //   startValue: xValue - 50, // or any other value that centers the node\n        //   endValue: xValue + 50\n        // })\n      } else {\n        vchart.dispatchAction({\n          type: 'downplay',\n          seriesIndex: 0\n        })\n      }\n    }\n  },\n  methods: {\n    handleChartReady (chartInstance) {\n      chartInstance.on('click', this.handleNodeClick)\n      console.log(1)\n    },\n    handleNodeClick (params) {\n      // Handle the node click event here\n      console.log('Node clicked:', params.data)\n    }\n  },\n  data () {\n    return {\n      dow30SampleGraph,\n      sp500SampleGraph,\n      searchTerm: '',\n      defaultGraphs: {\n        SP500: sp500SampleGraph,\n        DOW30: dow30SampleGraph\n      },\n      useGraph: null,\n      edgeColors: [\n        { name: 'competition', color: 'red' },\n        { name: 'unknown', color: 'black' }\n      ],\n      edgeColorMap: {\n        unknown: 'lightgrey',\n        other: 'lightgrey',\n        competition: 'black'\n      },\n      chart: null,\n      toEmphasize: [\n        'MSFT', 'ZOOM', 'INTC', 'IBM', 'CSCO'\n      ]\n    }\n  },\n  async created () {\n    try {\n      const graph = await getCompanyGraph(this.$route.params.id, this.$route.params.layers)\n      if (graph && graph.links && graph.nodes) {\n        console.log(graph)\n        // graphType = graphType && this.defaultGraphs[graphType.toUpperCase()]\n        //   ? this.$route.params.graphType\n        //   : 'DOW30'\n        const useGraph = graph\n        this.useGraph = useGraph\n\n        const nodeLinks = useGraph.links.sort((a, b) => {\n          const sourceIdA = parseInt(a.source)\n          const sourceIdB = parseInt(b.source)\n\n          if (sourceIdA < sourceIdB) {\n            return -1\n          } else if (sourceIdA > sourceIdB) {\n            return 1\n          } else {\n            return 0\n          }\n        })\n        const linkCount = {}\n        nodeLinks.forEach(link => {\n          if (!linkCount[link.source]) {\n            linkCount[link.source] = 1\n          } else {\n            linkCount[link.source] += 1\n          }\n        })\n        const nodes = useGraph.nodes.map(node => {\n          let size = 10\n\n          if (linkCount[node.id] > 10) {\n            size = linkCount[node.id]\n          }\n          if (this.toEmphasize.includes(node.name)) {\n            return {\n              id: node.id,\n              name: node.name,\n              symbolSize: size,\n              emphasized: true,\n              itemStyle: {\n                borderWidth: 4,\n                borderColor: 'red'\n              },\n              label: {\n                fontSize: '18px',\n                fontWeight: 'bolder'\n              }\n            }\n          } else {\n            return {\n              id: node.id,\n              name: node.name,\n              symbolSize: size\n            }\n          }\n        })\n        // const nodes = useGraph.nodes\n        const links = useGraph.links.map(link => {\n          return {\n            id: link.id,\n            category: link.category,\n            source: link.source,\n            target: link.target,\n            lineStyle: {\n              color: this.edgeColorMap[link.category],\n              width: 2\n            },\n            label: {\n              color: this.edgeColorMap[link.category]\n            }\n          }\n        })\n\n        const option = ref({\n          backgroundColor: '#fff',\n          title: {\n            text: 'Company Relations',\n            subtext: 'See how companies relate with each other',\n            top: 'top',\n            left: 'center',\n            color: '#000'\n          },\n          tooltip: {},\n          animationDuration: 150,\n          animationEasingUpdate: 'quinticInOut',\n          series: [\n            {\n              name: 'sample',\n              type: 'graph',\n              layout: 'force',\n              force: { // 力引导布局相关的配置项\n                repulsion: 80, // 节点之间的斥力因子\n                gravity: 0.02, // 节点受到的向中心的引力因子 越大越往中心靠拢\n                edgeLength: 240, // 边的两个节点之间的距离\n                layoutAnimation: false // 显示布局的迭代动画\n              },\n              focusNodeAdjacency: true,\n              edgeSymbol: ['none', 'none'],\n              data: nodes,\n              links,\n              roam: true,\n              label: {\n                color: '#000',\n                show: true,\n                position: 'right',\n                formatter: '{b}'\n              },\n              edgeLabel: { // 边的设置\n                show: true,\n                position: 'middle',\n                fontSize: 12,\n                formatter: (params) => {\n                  return params.data.category\n                }\n              },\n              lineStyle: {\n                color: 'source',\n                curveness: 0.3\n              },\n              emphasis: {\n                focus: 'adjacency',\n                lineStyle: {\n                  width: 10\n                }\n              }\n            }\n          ]\n        })\n\n        this.chart = option\n        // this.chart.on('click', (params) => {\n        //   // Handle the node click event here\n        //   console.log('Node clicked:', params)\n        // })\n      } else {\n        console.log('Invalid graph data')\n      }\n    } catch (error) {\n      console.error('Error fetching company graph:', error)\n    }\n  },\n  // const graph = null\n  mounted () {\n    this.$nextTick(() => {\n      const vchart = this.$refs.vchart\n      vchart.chart.on('click', this.handleNodeClick)\n    })\n  }\n  // mounted () {\n  //   const vchart = this.$refs.vchart\n  // }\n})\n</script>\n\n<style scoped>\n.chart-container {\n  flex: 1;\n  margin-bottom: 5px;\n}\n\n.chart {\n  height: 75vh;\n}\n\n.graphSearch {\n  width: 20%;\n  padding-bottom: 10px;\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}