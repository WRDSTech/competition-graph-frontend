{"ast":null,"code":"import { use } from 'echarts/core';\nimport { CanvasRenderer } from 'echarts/renderers';\nimport { GraphChart } from 'echarts/charts';\nimport { TitleComponent, TooltipComponent, LegendComponent } from 'echarts/components';\nimport VChart, { THEME_KEY } from 'vue-echarts';\nimport { ref, defineComponent, h } from 'vue';\n// import { getCompanyGraph } from '../api/company-graph'\n\nuse([CanvasRenderer, GraphChart, TitleComponent, TooltipComponent, LegendComponent]);\nexport default defineComponent({\n  name: 'SearchPage',\n  components: {\n    VChart,\n    h\n  },\n  provide: {\n    [THEME_KEY]: 'dark'\n  },\n  watch: {\n    searchTerm() {\n      const matchingNodes = this.useGraph.nodes.filter(node => node.name === this.searchTerm);\n      console.log(matchingNodes);\n      const vchart = this.$refs.vchart;\n      // const nodeData = chart.getOption().series[0].data.find(data => data.id === nodeId);\n\n      if (matchingNodes.length > 0) {\n        const nodeIds = matchingNodes.map(node => node.id);\n        vchart.dispatchAction({\n          type: 'highlight',\n          seriesIndex: 0,\n          nodeIds\n        });\n        // vchart.dispatchAction({\n        //   type: 'dataZoom',\n        //   dataZoomId: 'dataZoomX',\n        //   startValue: xValue - 50, // or any other value that centers the node\n        //   endValue: xValue + 50\n        // })\n      } else {\n        vchart.dispatchAction({\n          type: 'downplay',\n          seriesIndex: 0\n        });\n      }\n    }\n  },\n  methods: {\n    handleChartReady(chartInstance) {\n      chartInstance.on('click', this.handleNodeClick);\n      console.log(1);\n    },\n    handleNodeClick(params) {\n      // Handle the node click event here\n      console.log('Node clicked:', params.data);\n    }\n  },\n  data() {\n    return {\n      companyName: '',\n      lays: '',\n      nodes: ''\n    };\n  },\n  async created() {\n    // const graph = await getCompanyGraph(0, 1000)\n    // const graph = null\n    let graphType = this.$route.params.graphType;\n    graphType = graphType && this.defaultGraphs[graphType.toUpperCase()] ? this.$route.params.graphType : 'DOW30';\n    const useGraph = this.defaultGraphs[graphType.toUpperCase()];\n    this.useGraph = useGraph;\n    const nodeLinks = useGraph.links.sort((a, b) => {\n      const sourceIdA = parseInt(a.source);\n      const sourceIdB = parseInt(b.source);\n      if (sourceIdA < sourceIdB) {\n        return -1;\n      } else if (sourceIdA > sourceIdB) {\n        return 1;\n      } else {\n        return 0;\n      }\n    });\n    const linkCount = {};\n    nodeLinks.forEach(link => {\n      if (!linkCount[link.source]) {\n        linkCount[link.source] = 1;\n      } else {\n        linkCount[link.source] += 1;\n      }\n    });\n    const nodes = useGraph.nodes.map(node => {\n      let size = 10;\n      if (linkCount[node.id] > 10) {\n        size = linkCount[node.id];\n      }\n      if (this.toEmphasize.includes(node.name)) {\n        return {\n          id: node.id,\n          name: node.name,\n          symbolSize: size,\n          emphasized: true,\n          itemStyle: {\n            borderWidth: 4,\n            borderColor: 'red'\n          },\n          label: {\n            fontSize: '18px',\n            fontWeight: 'bolder'\n          }\n        };\n      } else {\n        return {\n          id: node.id,\n          name: node.name,\n          symbolSize: size\n        };\n      }\n    });\n    // const nodes = useGraph.nodes\n    const links = useGraph.links.map(link => {\n      return {\n        id: link.id,\n        category: link.category,\n        source: link.source,\n        target: link.target,\n        lineStyle: {\n          color: this.edgeColorMap[link.category],\n          width: 2\n        },\n        label: {\n          color: this.edgeColorMap[link.category]\n        }\n      };\n    });\n    const option = ref({\n      backgroundColor: '#fff',\n      title: {\n        text: 'Company Relations',\n        subtext: 'See how companies relate with each other',\n        top: 'top',\n        left: 'center',\n        color: '#000'\n      },\n      tooltip: {},\n      animationDuration: 150,\n      animationEasingUpdate: 'quinticInOut',\n      series: [{\n        name: 'sample',\n        type: 'graph',\n        layout: 'force',\n        force: {\n          // 力引导布局相关的配置项\n          repulsion: 80,\n          // 节点之间的斥力因子\n          gravity: 0.02,\n          // 节点受到的向中心的引力因子 越大越往中心靠拢\n          edgeLength: 240,\n          // 边的两个节点之间的距离\n          layoutAnimation: false // 显示布局的迭代动画\n        },\n\n        focusNodeAdjacency: true,\n        edgeSymbol: ['none', 'none'],\n        data: nodes,\n        links,\n        roam: true,\n        label: {\n          color: '#000',\n          show: true,\n          position: 'right',\n          formatter: '{b}'\n        },\n        edgeLabel: {\n          // 边的设置\n          show: true,\n          position: 'middle',\n          fontSize: 12,\n          formatter: params => {\n            return params.data.category;\n          }\n        },\n        lineStyle: {\n          color: 'source',\n          curveness: 0.3\n        },\n        emphasis: {\n          focus: 'adjacency',\n          lineStyle: {\n            width: 10\n          }\n        }\n      }]\n    });\n    this.chart = option;\n    // this.chart.on('click', (params) => {\n    //   // Handle the node click event here\n    //   console.log('Node clicked:', params)\n    // })\n  },\n\n  mounted() {\n    this.$nextTick(() => {\n      const vchart = this.$refs.vchart;\n      vchart.chart.on('click', this.handleNodeClick);\n    });\n  }\n  // mounted () {\n  //   const vchart = this.$refs.vchart\n  // }\n});","map":{"version":3,"names":["use","CanvasRenderer","GraphChart","TitleComponent","TooltipComponent","LegendComponent","VChart","THEME_KEY","ref","defineComponent","h","name","components","provide","watch","searchTerm","matchingNodes","useGraph","nodes","filter","node","console","log","vchart","$refs","length","nodeIds","map","id","dispatchAction","type","seriesIndex","methods","handleChartReady","chartInstance","on","handleNodeClick","params","data","companyName","lays","created","graphType","$route","defaultGraphs","toUpperCase","nodeLinks","links","sort","a","b","sourceIdA","parseInt","source","sourceIdB","linkCount","forEach","link","size","toEmphasize","includes","symbolSize","emphasized","itemStyle","borderWidth","borderColor","label","fontSize","fontWeight","category","target","lineStyle","color","edgeColorMap","width","option","backgroundColor","title","text","subtext","top","left","tooltip","animationDuration","animationEasingUpdate","series","layout","force","repulsion","gravity","edgeLength","layoutAnimation","focusNodeAdjacency","edgeSymbol","roam","show","position","formatter","edgeLabel","curveness","emphasis","focus","chart","mounted","$nextTick"],"sources":["src/components/SearchForm.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <div class=\"search-form\">\n      <div class=\"row\">\n        <div class=\"item1\">\n          <h3 class=\"title\">Search a Company</h3>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"item3\">\n          <h5 class=\"title\">Company Name</h5>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"item2\">\n          <el-autocomplete class=\"graphSearch\" v-model=\"companyName\" placeholder=\"Please enter a company name or ticker, e.g. MSFT\" :fetch-suggestions=\"querySearch\" :trigger-on-focus=\"false\" @select=\"handleSelect\"></el-autocomplete>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"item3\">\n          <h5 class=\"title\">How many layers of relationship to expand</h5>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"item2\">\n          <el-input class=\"graphSearch\" v-model=\"lays\" placeholder=\"1\" type=\"number\"></el-input>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"item3\">\n          <h5 class=\"title\">How many nodes to show per layer</h5>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"item2\">\n          <el-input class=\"graphSearch\" v-model=\"nodes\" type=\"number\" placeholder=\"1\"></el-input>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class = \"item4\">\n          <el-button type=\"primary\" ><b>Go!</b></el-button>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { use } from 'echarts/core'\nimport { CanvasRenderer } from 'echarts/renderers'\nimport { GraphChart } from 'echarts/charts'\nimport {\n  TitleComponent,\n  TooltipComponent,\n  LegendComponent\n} from 'echarts/components'\nimport VChart, { THEME_KEY } from 'vue-echarts'\nimport { ref, defineComponent, h } from 'vue'\n// import { getCompanyGraph } from '../api/company-graph'\n\nuse([\n  CanvasRenderer,\n  GraphChart,\n  TitleComponent,\n  TooltipComponent,\n  LegendComponent\n])\n\nexport default defineComponent({\n  name: 'SearchPage',\n  components: {\n    VChart,\n    h\n  },\n  provide: {\n    [THEME_KEY]: 'dark'\n  },\n  watch: {\n    searchTerm () {\n      const matchingNodes = this.useGraph.nodes.filter(\n        node => node.name === this.searchTerm\n      )\n      console.log(matchingNodes)\n      const vchart = this.$refs.vchart\n      // const nodeData = chart.getOption().series[0].data.find(data => data.id === nodeId);\n\n      if (matchingNodes.length > 0) {\n        const nodeIds = matchingNodes.map(node => node.id)\n        vchart.dispatchAction({\n          type: 'highlight',\n          seriesIndex: 0,\n          nodeIds\n        })\n        // vchart.dispatchAction({\n        //   type: 'dataZoom',\n        //   dataZoomId: 'dataZoomX',\n        //   startValue: xValue - 50, // or any other value that centers the node\n        //   endValue: xValue + 50\n        // })\n      } else {\n        vchart.dispatchAction({\n          type: 'downplay',\n          seriesIndex: 0\n        })\n      }\n    }\n  },\n  methods: {\n    handleChartReady (chartInstance) {\n      chartInstance.on('click', this.handleNodeClick)\n      console.log(1)\n    },\n    handleNodeClick (params) {\n      // Handle the node click event here\n      console.log('Node clicked:', params.data)\n    }\n  },\n  data () {\n    return {\n      companyName: '',\n      lays: '',\n      nodes: '',\n\n    }\n  },\n  async created () {\n    // const graph = await getCompanyGraph(0, 1000)\n    // const graph = null\n    let graphType = this.$route.params.graphType\n    graphType = graphType && this.defaultGraphs[graphType.toUpperCase()]\n      ? this.$route.params.graphType\n      : 'DOW30'\n    const useGraph = this.defaultGraphs[graphType.toUpperCase()]\n    this.useGraph = useGraph\n\n    const nodeLinks = useGraph.links.sort((a, b) => {\n      const sourceIdA = parseInt(a.source)\n      const sourceIdB = parseInt(b.source)\n\n      if (sourceIdA < sourceIdB) {\n        return -1\n      } else if (sourceIdA > sourceIdB) {\n        return 1\n      } else {\n        return 0\n      }\n    })\n    const linkCount = {}\n    nodeLinks.forEach(link => {\n      if (!linkCount[link.source]) {\n        linkCount[link.source] = 1\n      } else {\n        linkCount[link.source] += 1\n      }\n    })\n    const nodes = useGraph.nodes.map(node => {\n      let size = 10\n\n      if (linkCount[node.id] > 10) {\n        size = linkCount[node.id]\n      }\n      if (this.toEmphasize.includes(node.name)) {\n        return {\n          id: node.id,\n          name: node.name,\n          symbolSize: size,\n          emphasized: true,\n          itemStyle: {\n            borderWidth: 4,\n            borderColor: 'red'\n          },\n          label: {\n            fontSize: '18px',\n            fontWeight: 'bolder'\n          }\n        }\n      } else {\n        return {\n          id: node.id,\n          name: node.name,\n          symbolSize: size\n        }\n      }\n    })\n    // const nodes = useGraph.nodes\n    const links = useGraph.links.map(link => {\n      return {\n        id: link.id,\n        category: link.category,\n        source: link.source,\n        target: link.target,\n        lineStyle: {\n          color: this.edgeColorMap[link.category],\n          width: 2\n        },\n        label: {\n          color: this.edgeColorMap[link.category]\n        }\n      }\n    })\n\n    const option = ref({\n      backgroundColor: '#fff',\n      title: {\n        text: 'Company Relations',\n        subtext: 'See how companies relate with each other',\n        top: 'top',\n        left: 'center',\n        color: '#000'\n      },\n      tooltip: {},\n      animationDuration: 150,\n      animationEasingUpdate: 'quinticInOut',\n      series: [\n        {\n          name: 'sample',\n          type: 'graph',\n          layout: 'force',\n          force: { // 力引导布局相关的配置项\n            repulsion: 80, // 节点之间的斥力因子\n            gravity: 0.02, // 节点受到的向中心的引力因子 越大越往中心靠拢\n            edgeLength: 240, // 边的两个节点之间的距离\n            layoutAnimation: false // 显示布局的迭代动画\n          },\n          focusNodeAdjacency: true,\n          edgeSymbol: ['none', 'none'],\n          data: nodes,\n          links,\n          roam: true,\n          label: {\n            color: '#000',\n            show: true,\n            position: 'right',\n            formatter: '{b}'\n          },\n          edgeLabel: { // 边的设置\n            show: true,\n            position: 'middle',\n            fontSize: 12,\n            formatter: (params) => {\n              return params.data.category\n            }\n          },\n          lineStyle: {\n            color: 'source',\n            curveness: 0.3\n          },\n          emphasis: {\n            focus: 'adjacency',\n            lineStyle: {\n              width: 10\n            }\n          }\n        }\n      ]\n    })\n\n    this.chart = option\n    // this.chart.on('click', (params) => {\n    //   // Handle the node click event here\n    //   console.log('Node clicked:', params)\n    // })\n  },\n  mounted () {\n    this.$nextTick(() => {\n      const vchart = this.$refs.vchart\n      vchart.chart.on('click', this.handleNodeClick)\n    })\n  }\n  // mounted () {\n  //   const vchart = this.$refs.vchart\n  // }\n})\n</script>\n\n<style scoped>\n.container {\n  flex: 1;\n  margin-bottom: 5px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.chart-container {\n  flex: 1;\n  margin-bottom: 5px;\n}\n\n.chart {\n  height: 75vh;\n}\n\n.graphSearch {\n  width: 100%; /* Cover the width of the container */\n  padding-bottom: 10px;\n}\n\n.search-form {\n  background-image: url('https://i.ibb.co/kBvCPSF/1543.jpg');\n  width: 33%;\n  border-radius: 2ch;\n}\n\n.row {\n  display: flex;\n  justify-content: center;\n  width: 100%;\n}\n\n.item1 {\n  text-align: left;\n  width: 90%;\n}\n.item3 {\n  text-align: left;\n  width: 90%;\n  margin-bottom: 0px;\n  height: 50px;\n}\n\n.title {\n  text-align: left;\n  color: black;\n}\n\n.item2 {\n  margin-top: 0px;\n  width: 90%;\n}\n.el-input .el-input__inner::placeholder {\n  font-style: italic; /* Set the placeholder text to italic */\n}\n.item4 {\n  margin-top: 40px;\n  margin-bottom: 50px;\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}