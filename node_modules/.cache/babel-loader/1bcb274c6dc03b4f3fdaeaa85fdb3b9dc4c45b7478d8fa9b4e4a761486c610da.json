{"ast":null,"code":"import { use } from 'echarts/core';\nimport { CanvasRenderer } from 'echarts/renderers';\nimport { GraphChart } from 'echarts/charts';\nimport { TitleComponent, TooltipComponent, LegendComponent } from 'echarts/components';\nimport VChart, { THEME_KEY } from 'vue-echarts';\nimport { ref, defineComponent } from 'vue';\nimport dow30SampleGraph from '@/assets/data/dow30_relation_backend.json';\nimport sp500SampleGraph from '@/assets/data/sp500_relation_backend.json';\n// import { getCompanyGraph } from '../api/company-graph'\n\nuse([CanvasRenderer, GraphChart, TitleComponent, TooltipComponent, LegendComponent]);\nexport default defineComponent({\n  name: 'PartialGraph',\n  components: {\n    VChart\n  },\n  provide: {\n    [THEME_KEY]: 'dark'\n  },\n  watch: {\n    searchTerm() {\n      const matchingNodes = this.useGraph.nodes.filter(node => node.name === this.searchTerm);\n      console.log(matchingNodes);\n      const vchart = this.$refs.vchart;\n      // const nodeData = chart.getOption().series[0].data.find(data => data.id === nodeId);\n\n      if (matchingNodes.length > 0) {\n        const nodeIds = matchingNodes.map(node => node.id);\n        vchart.dispatchAction({\n          type: 'highlight',\n          seriesIndex: 0,\n          nodeIds\n        });\n        // vchart.dispatchAction({\n        //   type: 'dataZoom',\n        //   dataZoomId: 'dataZoomX',\n        //   startValue: xValue - 50, // or any other value that centers the node\n        //   endValue: xValue + 50\n        // })\n      } else {\n        vchart.dispatchAction({\n          type: 'downplay',\n          seriesIndex: 0\n        });\n      }\n    }\n  },\n  methods: {\n    handleChartReady(chartInstance) {\n      chartInstance.on('click', this.handleNodeClick);\n      console.log(1);\n    },\n    handleNodeClick(params) {\n      // Handle the node click event here\n      console.log('Node clicked:', params.data);\n    }\n  },\n  data() {\n    return {\n      dow30SampleGraph,\n      sp500SampleGraph,\n      searchTerm: '',\n      defaultGraphs: {\n        SP500: sp500SampleGraph,\n        DOW30: dow30SampleGraph\n      },\n      useGraph: null,\n      edgeColors: [{\n        name: 'competition',\n        color: 'red'\n      }, {\n        name: 'unknown',\n        color: 'black'\n      }],\n      edgeColorMap: {\n        unknown: 'lightgrey',\n        other: 'lightgrey',\n        competition: 'black'\n      },\n      chart: null,\n      toEmphasize: ['MSFT', 'ZOOM', 'INTC', 'IBM', 'CSCO']\n    };\n  },\n  async created() {\n    // const graph = await getCompanyGraph(0, 1000)\n    // const graph = null\n    let graphType = this.$route.params.graphType;\n    // graphType = graphType && this.defaultGraphs[graphType.toUpperCase()]\n    //   ? this.$route.params.graphType\n    //   : 'DOW30'\n    graphType = 'DOW30';\n    const useGraph = this.defaultGraphs[graphType.toUpperCase()];\n    this.useGraph = useGraph;\n    const nodeLinks = useGraph.links.sort((a, b) => {\n      const sourceIdA = parseInt(a.source);\n      const sourceIdB = parseInt(b.source);\n      if (sourceIdA < sourceIdB) {\n        return -1;\n      } else if (sourceIdA > sourceIdB) {\n        return 1;\n      } else {\n        return 0;\n      }\n    });\n    const linkCount = {};\n    nodeLinks.forEach(link => {\n      if (!linkCount[link.source]) {\n        linkCount[link.source] = 1;\n      } else {\n        linkCount[link.source] += 1;\n      }\n    });\n    const nodes = useGraph.nodes.map(node => {\n      let size = 10;\n      if (linkCount[node.id] > 10) {\n        size = linkCount[node.id];\n      }\n      if (this.toEmphasize.includes(node.name)) {\n        return {\n          id: node.id,\n          name: node.name,\n          symbolSize: size,\n          emphasized: true,\n          itemStyle: {\n            borderWidth: 4,\n            borderColor: 'red'\n          },\n          label: {\n            fontSize: '18px',\n            fontWeight: 'bolder'\n          }\n        };\n      } else {\n        return {\n          id: node.id,\n          name: node.name,\n          symbolSize: size\n        };\n      }\n    });\n    // const nodes = useGraph.nodes\n    const links = useGraph.links.map(link => {\n      return {\n        id: link.id,\n        category: link.category,\n        source: link.source,\n        target: link.target,\n        lineStyle: {\n          color: this.edgeColorMap[link.category],\n          width: 2\n        },\n        label: {\n          color: this.edgeColorMap[link.category]\n        }\n      };\n    });\n    const option = ref({\n      backgroundColor: '#fff',\n      title: {\n        text: 'Company Relations',\n        subtext: 'See how companies relate with each other',\n        top: 'top',\n        left: 'center',\n        color: '#000'\n      },\n      tooltip: {},\n      animationDuration: 150,\n      animationEasingUpdate: 'quinticInOut',\n      series: [{\n        name: 'sample',\n        type: 'graph',\n        layout: 'force',\n        force: {\n          // 力引导布局相关的配置项\n          repulsion: 80,\n          // 节点之间的斥力因子\n          gravity: 0.02,\n          // 节点受到的向中心的引力因子 越大越往中心靠拢\n          edgeLength: 240,\n          // 边的两个节点之间的距离\n          layoutAnimation: false // 显示布局的迭代动画\n        },\n\n        focusNodeAdjacency: true,\n        edgeSymbol: ['none', 'none'],\n        data: nodes,\n        links,\n        roam: true,\n        label: {\n          color: '#000',\n          show: true,\n          position: 'right',\n          formatter: '{b}'\n        },\n        edgeLabel: {\n          // 边的设置\n          show: true,\n          position: 'middle',\n          fontSize: 12,\n          formatter: params => {\n            return params.data.category;\n          }\n        },\n        lineStyle: {\n          color: 'source',\n          curveness: 0.3\n        },\n        emphasis: {\n          focus: 'adjacency',\n          lineStyle: {\n            width: 10\n          }\n        }\n      }]\n    });\n    this.chart = option;\n    // this.chart.on('click', (params) => {\n    //   // Handle the node click event here\n    //   console.log('Node clicked:', params)\n    // })\n  },\n\n  mounted() {\n    this.$nextTick(() => {\n      const vchart = this.$refs.vchart;\n      vchart.chart.on('click', this.handleNodeClick);\n    });\n  }\n  // mounted () {\n  //   const vchart = this.$refs.vchart\n  // }\n});","map":{"version":3,"names":["use","CanvasRenderer","GraphChart","TitleComponent","TooltipComponent","LegendComponent","VChart","THEME_KEY","ref","defineComponent","dow30SampleGraph","sp500SampleGraph","name","components","provide","watch","searchTerm","matchingNodes","useGraph","nodes","filter","node","console","log","vchart","$refs","length","nodeIds","map","id","dispatchAction","type","seriesIndex","methods","handleChartReady","chartInstance","on","handleNodeClick","params","data","defaultGraphs","SP500","DOW30","edgeColors","color","edgeColorMap","unknown","other","competition","chart","toEmphasize","created","graphType","$route","toUpperCase","nodeLinks","links","sort","a","b","sourceIdA","parseInt","source","sourceIdB","linkCount","forEach","link","size","includes","symbolSize","emphasized","itemStyle","borderWidth","borderColor","label","fontSize","fontWeight","category","target","lineStyle","width","option","backgroundColor","title","text","subtext","top","left","tooltip","animationDuration","animationEasingUpdate","series","layout","force","repulsion","gravity","edgeLength","layoutAnimation","focusNodeAdjacency","edgeSymbol","roam","show","position","formatter","edgeLabel","curveness","emphasis","focus","mounted","$nextTick"],"sources":["src/components/PartialGraph.vue"],"sourcesContent":["<template>\n    <div class=\"chart-container\">\n      <el-input class=\"graphSearch\" v-model=\"searchTerm\" placeholder=\"Search for node\"></el-input>\n      <v-chart ref=\"vchart\" class=\"chart\" :option=\"chart\" />\n    </div>\n  </template>\n  \n  <script>\n  import { use } from 'echarts/core'\n  import { CanvasRenderer } from 'echarts/renderers'\n  import { GraphChart } from 'echarts/charts'\n  import {\n    TitleComponent,\n    TooltipComponent,\n    LegendComponent\n  } from 'echarts/components'\n  import VChart, { THEME_KEY } from 'vue-echarts'\n  import { ref, defineComponent } from 'vue'\n  import dow30SampleGraph from '@/assets/data/dow30_relation_backend.json'\n  import sp500SampleGraph from '@/assets/data/sp500_relation_backend.json'\n  // import { getCompanyGraph } from '../api/company-graph'\n  \n  use([\n    CanvasRenderer,\n    GraphChart,\n    TitleComponent,\n    TooltipComponent,\n    LegendComponent\n  ])\n  \n  export default defineComponent({\n    name: 'PartialGraph',\n    components: {\n      VChart\n    },\n    provide: {\n      [THEME_KEY]: 'dark'\n    },\n    watch: {\n      searchTerm () {\n        const matchingNodes = this.useGraph.nodes.filter(\n          node => node.name === this.searchTerm\n        )\n        console.log(matchingNodes)\n        const vchart = this.$refs.vchart\n        // const nodeData = chart.getOption().series[0].data.find(data => data.id === nodeId);\n  \n        if (matchingNodes.length > 0) {\n          const nodeIds = matchingNodes.map(node => node.id)\n          vchart.dispatchAction({\n            type: 'highlight',\n            seriesIndex: 0,\n            nodeIds\n          })\n          // vchart.dispatchAction({\n          //   type: 'dataZoom',\n          //   dataZoomId: 'dataZoomX',\n          //   startValue: xValue - 50, // or any other value that centers the node\n          //   endValue: xValue + 50\n          // })\n        } else {\n          vchart.dispatchAction({\n            type: 'downplay',\n            seriesIndex: 0\n          })\n        }\n      }\n    },\n    methods: {\n      handleChartReady (chartInstance) {\n        chartInstance.on('click', this.handleNodeClick)\n        console.log(1)\n      },\n      handleNodeClick (params) {\n        // Handle the node click event here\n        console.log('Node clicked:', params.data)\n      }\n    },\n    data () {\n      return {\n        dow30SampleGraph,\n        sp500SampleGraph,\n        searchTerm: '',\n        defaultGraphs: {\n          SP500: sp500SampleGraph,\n          DOW30: dow30SampleGraph\n        },\n        useGraph: null,\n        edgeColors: [\n          { name: 'competition', color: 'red' },\n          { name: 'unknown', color: 'black' }\n        ],\n        edgeColorMap: {\n          unknown: 'lightgrey',\n          other: 'lightgrey',\n          competition: 'black'\n        },\n        chart: null,\n        toEmphasize: [\n          'MSFT', 'ZOOM', 'INTC', 'IBM', 'CSCO'\n        ]\n      }\n    },\n    async created () {\n      // const graph = await getCompanyGraph(0, 1000)\n      // const graph = null\n      let graphType = this.$route.params.graphType\n      // graphType = graphType && this.defaultGraphs[graphType.toUpperCase()]\n      //   ? this.$route.params.graphType\n      //   : 'DOW30'\n      graphType = 'DOW30'\n      const useGraph = this.defaultGraphs[graphType.toUpperCase()]\n      this.useGraph = useGraph\n  \n      const nodeLinks = useGraph.links.sort((a, b) => {\n        const sourceIdA = parseInt(a.source)\n        const sourceIdB = parseInt(b.source)\n  \n        if (sourceIdA < sourceIdB) {\n          return -1\n        } else if (sourceIdA > sourceIdB) {\n          return 1\n        } else {\n          return 0\n        }\n      })\n      const linkCount = {}\n      nodeLinks.forEach(link => {\n        if (!linkCount[link.source]) {\n          linkCount[link.source] = 1\n        } else {\n          linkCount[link.source] += 1\n        }\n      })\n      const nodes = useGraph.nodes.map(node => {\n        let size = 10\n  \n        if (linkCount[node.id] > 10) {\n          size = linkCount[node.id]\n        }\n        if (this.toEmphasize.includes(node.name)) {\n          return {\n            id: node.id,\n            name: node.name,\n            symbolSize: size,\n            emphasized: true,\n            itemStyle: {\n              borderWidth: 4,\n              borderColor: 'red'\n            },\n            label: {\n              fontSize: '18px',\n              fontWeight: 'bolder'\n            }\n          }\n        } else {\n          return {\n            id: node.id,\n            name: node.name,\n            symbolSize: size\n          }\n        }\n      })\n      // const nodes = useGraph.nodes\n      const links = useGraph.links.map(link => {\n        return {\n          id: link.id,\n          category: link.category,\n          source: link.source,\n          target: link.target,\n          lineStyle: {\n            color: this.edgeColorMap[link.category],\n            width: 2\n          },\n          label: {\n            color: this.edgeColorMap[link.category]\n          }\n        }\n      })\n  \n      const option = ref({\n        backgroundColor: '#fff',\n        title: {\n          text: 'Company Relations',\n          subtext: 'See how companies relate with each other',\n          top: 'top',\n          left: 'center',\n          color: '#000'\n        },\n        tooltip: {},\n        animationDuration: 150,\n        animationEasingUpdate: 'quinticInOut',\n        series: [\n          {\n            name: 'sample',\n            type: 'graph',\n            layout: 'force',\n            force: { // 力引导布局相关的配置项\n              repulsion: 80, // 节点之间的斥力因子\n              gravity: 0.02, // 节点受到的向中心的引力因子 越大越往中心靠拢\n              edgeLength: 240, // 边的两个节点之间的距离\n              layoutAnimation: false // 显示布局的迭代动画\n            },\n            focusNodeAdjacency: true,\n            edgeSymbol: ['none', 'none'],\n            data: nodes,\n            links,\n            roam: true,\n            label: {\n              color: '#000',\n              show: true,\n              position: 'right',\n              formatter: '{b}'\n            },\n            edgeLabel: { // 边的设置\n              show: true,\n              position: 'middle',\n              fontSize: 12,\n              formatter: (params) => {\n                return params.data.category\n              }\n            },\n            lineStyle: {\n              color: 'source',\n              curveness: 0.3\n            },\n            emphasis: {\n              focus: 'adjacency',\n              lineStyle: {\n                width: 10\n              }\n            }\n          }\n        ]\n      })\n  \n      this.chart = option\n      // this.chart.on('click', (params) => {\n      //   // Handle the node click event here\n      //   console.log('Node clicked:', params)\n      // })\n    },\n    mounted () {\n      this.$nextTick(() => {\n        const vchart = this.$refs.vchart\n        vchart.chart.on('click', this.handleNodeClick)\n      })\n    }\n    // mounted () {\n    //   const vchart = this.$refs.vchart\n    // }\n  })\n  </script>\n  \n  <style scoped>\n  .chart-container {\n    flex: 1;\n    margin-bottom: 5px;\n  }\n  \n  .chart {\n    height: 75vh;\n  }\n  \n  .graphSearch {\n    width: 20%;\n    padding-bottom: 10px;\n  }\n  </style>\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}