{"ast":null,"code":"import { use } from 'echarts/core';\nimport { CanvasRenderer } from 'echarts/renderers';\nimport { GraphChart } from 'echarts/charts';\nimport { TitleComponent, TooltipComponent, LegendComponent } from 'echarts/components';\nimport VChart, { THEME_KEY } from 'vue-echarts';\nimport { ref, defineComponent } from 'vue';\nimport dow30SampleGraph from '@/assets/data/dow30_relation_backend.json';\nimport sp500SampleGraph from '@/assets/data/sp500_relation_backend.json';\n// import { getCompanyGraph } from '../api/company-graph'\n\nuse([CanvasRenderer, GraphChart, TitleComponent, TooltipComponent, LegendComponent]);\nexport default defineComponent({\n  name: 'CompanyGraph',\n  components: {\n    VChart\n  },\n  provide: {\n    [THEME_KEY]: 'dark'\n  },\n  watch: {\n    searchTerm() {\n      const matchingNodes = this.useGraph.nodes.filter(node => node.name === this.searchTerm);\n      console.log(matchingNodes);\n      const vchart = this.$refs.vchart;\n      // const nodeData = chart.getOption().series[0].data.find(data => data.id === nodeId);\n\n      if (matchingNodes.length > 0) {\n        const nodeIds = matchingNodes.map(node => node.id);\n        vchart.dispatchAction({\n          type: 'highlight',\n          seriesIndex: 0,\n          nodeIds\n        });\n        // vchart.dispatchAction({\n        //   type: 'dataZoom',\n        //   dataZoomId: 'dataZoomX',\n        //   startValue: xValue - 50, // or any other value that centers the node\n        //   endValue: xValue + 50\n        // })\n      } else {\n        vchart.dispatchAction({\n          type: 'downplay',\n          seriesIndex: 0\n        });\n      }\n    }\n  },\n  data() {\n    return {\n      dow30SampleGraph,\n      sp500SampleGraph,\n      searchTerm: '',\n      defaultGraphs: {\n        SP500: sp500SampleGraph,\n        DOW30: dow30SampleGraph\n      },\n      useGraph: null,\n      edgeColors: [{\n        name: 'competition',\n        color: 'red'\n      }, {\n        name: 'unknown',\n        color: 'black'\n      }],\n      edgeColorMap: {\n        unknown: 'lightgrey',\n        other: 'lightgrey',\n        competition: 'black'\n      },\n      chart: null,\n      toEmphasize: ['MSFT', 'ZOOM', 'INTC', 'IBM', 'CSCO']\n    };\n  },\n  async created() {\n    // const graph = await getCompanyGraph(0, 1000)\n    // const graph = null\n    let graphType = this.$route.params.graphType;\n    graphType = graphType && this.defaultGraphs[graphType.toUpperCase()] ? this.$route.params.graphType : 'DOW30';\n    const useGraph = this.defaultGraphs[graphType.toUpperCase()];\n    this.useGraph = useGraph;\n    const nodeLinks = useGraph.links.sort((a, b) => {\n      const sourceIdA = parseInt(a.source);\n      const sourceIdB = parseInt(b.source);\n      if (sourceIdA < sourceIdB) {\n        return -1;\n      } else if (sourceIdA > sourceIdB) {\n        return 1;\n      } else {\n        return 0;\n      }\n    });\n    const linkCount = {};\n    nodeLinks.forEach(link => {\n      if (!linkCount[link.source]) {\n        linkCount[link.source] = 1;\n      } else {\n        linkCount[link.source] += 1;\n      }\n    });\n    const nodes = useGraph.nodes.map(node => {\n      let size = 10;\n      if (linkCount[node.id] > 10) {\n        size = linkCount[node.id];\n      }\n      if (this.toEmphasize.includes(node.name)) {\n        return {\n          id: node.id,\n          name: node.name,\n          symbolSize: size,\n          emphasized: true,\n          itemStyle: {\n            borderWidth: 4,\n            borderColor: 'red'\n          },\n          label: {\n            fontSize: '18px',\n            fontWeight: 'bolder'\n          }\n        };\n      } else {\n        return {\n          id: node.id,\n          name: node.name,\n          symbolSize: size\n        };\n      }\n    });\n    console.log(1);\n    console.log(nodes[10]);\n    // const nodes = useGraph.nodes\n    const links = useGraph.links.map(link => {\n      return {\n        id: link.id,\n        category: link.category,\n        source: link.source,\n        target: link.target,\n        lineStyle: {\n          color: this.edgeColorMap[link.category],\n          width: 2\n        },\n        label: {\n          color: this.edgeColorMap[link.category]\n        }\n      };\n    });\n    const option = ref({\n      backgroundColor: '#fff',\n      title: {\n        text: 'Company Relations',\n        subtext: 'See how companies relate with each other',\n        top: 'top',\n        left: 'center',\n        color: '#000'\n      },\n      tooltip: {},\n      animationDuration: 15000,\n      animationEasingUpdate: 'quinticInOut',\n      series: [{\n        name: 'sample',\n        type: 'graph',\n        layout: 'force',\n        force: {\n          // 力引导布局相关的配置项\n          repulsion: 80,\n          // 节点之间的斥力因子\n          gravity: 0.02,\n          // 节点受到的向中心的引力因子 越大越往中心靠拢\n          edgeLength: 240,\n          // 边的两个节点之间的距离\n          layoutAnimation: false // 显示布局的迭代动画\n        },\n\n        focusNodeAdjacency: true,\n        edgeSymbol: ['none', 'none'],\n        data: nodes,\n        links,\n        roam: true,\n        label: {\n          color: '#000',\n          show: true,\n          position: 'right',\n          formatter: '{b}'\n        },\n        edgeLabel: {\n          // 边的设置\n          show: true,\n          position: 'middle',\n          fontSize: 12,\n          formatter: params => {\n            return params.data.category;\n          }\n        },\n        lineStyle: {\n          color: 'source',\n          curveness: 0.3\n        },\n        emphasis: {\n          focus: 'adjacency',\n          lineStyle: {\n            width: 10\n          }\n        }\n      }]\n    });\n    this.chart = option;\n  },\n  mounted() {\n    const vchart = this.$refs.vchart;\n    vchart.on(\"click\", params => {\n      // Handle the node click event here\n      console.log(\"Node clicked:\", params);\n    });\n  }\n});","map":{"version":3,"names":["use","CanvasRenderer","GraphChart","TitleComponent","TooltipComponent","LegendComponent","VChart","THEME_KEY","ref","defineComponent","dow30SampleGraph","sp500SampleGraph","name","components","provide","watch","searchTerm","matchingNodes","useGraph","nodes","filter","node","console","log","vchart","$refs","length","nodeIds","map","id","dispatchAction","type","seriesIndex","data","defaultGraphs","SP500","DOW30","edgeColors","color","edgeColorMap","unknown","other","competition","chart","toEmphasize","created","graphType","$route","params","toUpperCase","nodeLinks","links","sort","a","b","sourceIdA","parseInt","source","sourceIdB","linkCount","forEach","link","size","includes","symbolSize","emphasized","itemStyle","borderWidth","borderColor","label","fontSize","fontWeight","category","target","lineStyle","width","option","backgroundColor","title","text","subtext","top","left","tooltip","animationDuration","animationEasingUpdate","series","layout","force","repulsion","gravity","edgeLength","layoutAnimation","focusNodeAdjacency","edgeSymbol","roam","show","position","formatter","edgeLabel","curveness","emphasis","focus","mounted","on"],"sources":["src/components/CompanyGraph.vue"],"sourcesContent":["<template>\r\n  <div class=\"chart-container\">\r\n    <el-input class=\"graphSearch\" v-model=\"searchTerm\" placeholder=\"Search for node\"></el-input>\r\n    <v-chart ref=\"vchart\" class=\"chart\" :option=\"chart\" />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { use } from 'echarts/core'\r\nimport { CanvasRenderer } from 'echarts/renderers'\r\nimport { GraphChart } from 'echarts/charts'\r\nimport {\r\n  TitleComponent,\r\n  TooltipComponent,\r\n  LegendComponent\r\n} from 'echarts/components'\r\nimport VChart, { THEME_KEY } from 'vue-echarts'\r\nimport { ref, defineComponent } from 'vue'\r\nimport dow30SampleGraph from '@/assets/data/dow30_relation_backend.json'\r\nimport sp500SampleGraph from '@/assets/data/sp500_relation_backend.json'\r\n// import { getCompanyGraph } from '../api/company-graph'\r\n\r\nuse([\r\n  CanvasRenderer,\r\n  GraphChart,\r\n  TitleComponent,\r\n  TooltipComponent,\r\n  LegendComponent\r\n])\r\n\r\nexport default defineComponent({\r\n  name: 'CompanyGraph',\r\n  components: {\r\n    VChart\r\n  },\r\n  provide: {\r\n    [THEME_KEY]: 'dark'\r\n  },\r\n  watch: {\r\n    searchTerm () {\r\n      const matchingNodes = this.useGraph.nodes.filter(\r\n        node => node.name === this.searchTerm\r\n      )\r\n      console.log(matchingNodes)\r\n      const vchart = this.$refs.vchart\r\n      // const nodeData = chart.getOption().series[0].data.find(data => data.id === nodeId);\r\n\r\n      if (matchingNodes.length > 0) {\r\n        const nodeIds = matchingNodes.map(node => node.id)\r\n        vchart.dispatchAction({\r\n          type: 'highlight',\r\n          seriesIndex: 0,\r\n          nodeIds\r\n        })\r\n        // vchart.dispatchAction({\r\n        //   type: 'dataZoom',\r\n        //   dataZoomId: 'dataZoomX',\r\n        //   startValue: xValue - 50, // or any other value that centers the node\r\n        //   endValue: xValue + 50\r\n        // })\r\n      } else {\r\n        vchart.dispatchAction({\r\n          type: 'downplay',\r\n          seriesIndex: 0\r\n        })\r\n      }\r\n    }\r\n  },\r\n  data () {\r\n    return {\r\n      dow30SampleGraph,\r\n      sp500SampleGraph,\r\n      searchTerm: '',\r\n      defaultGraphs: {\r\n        SP500: sp500SampleGraph,\r\n        DOW30: dow30SampleGraph\r\n      },\r\n      useGraph: null,\r\n      edgeColors: [\r\n        { name: 'competition', color: 'red' },\r\n        { name: 'unknown', color: 'black' }\r\n      ],\r\n      edgeColorMap: {\r\n        unknown: 'lightgrey',\r\n        other: 'lightgrey',\r\n        competition: 'black'\r\n      },\r\n      chart: null,\r\n      toEmphasize: [\r\n        'MSFT', 'ZOOM', 'INTC', 'IBM', 'CSCO'\r\n      ]\r\n    }\r\n  },\r\n  async created () {\r\n    // const graph = await getCompanyGraph(0, 1000)\r\n    // const graph = null\r\n    let graphType = this.$route.params.graphType\r\n    graphType = graphType && this.defaultGraphs[graphType.toUpperCase()]\r\n      ? this.$route.params.graphType\r\n      : 'DOW30'\r\n    const useGraph = this.defaultGraphs[graphType.toUpperCase()]\r\n    this.useGraph = useGraph\r\n\r\n    const nodeLinks = useGraph.links.sort((a, b) => {\r\n      const sourceIdA = parseInt(a.source)\r\n      const sourceIdB = parseInt(b.source)\r\n\r\n      if (sourceIdA < sourceIdB) {\r\n        return -1\r\n      } else if (sourceIdA > sourceIdB) {\r\n        return 1\r\n      } else {\r\n        return 0\r\n      }\r\n    })\r\n    const linkCount = {}\r\n    nodeLinks.forEach(link => {\r\n      if (!linkCount[link.source]) {\r\n        linkCount[link.source] = 1\r\n      } else {\r\n        linkCount[link.source] += 1\r\n      }\r\n    })\r\n    const nodes = useGraph.nodes.map(node => {\r\n      let size = 10\r\n\r\n      if (linkCount[node.id] > 10) {\r\n        size = linkCount[node.id]\r\n      }\r\n      if (this.toEmphasize.includes(node.name)) {\r\n        return {\r\n          id: node.id,\r\n          name: node.name,\r\n          symbolSize: size,\r\n          emphasized: true,\r\n          itemStyle: {\r\n            borderWidth: 4,\r\n            borderColor: 'red'\r\n          },\r\n          label: {\r\n            fontSize: '18px',\r\n            fontWeight: 'bolder'\r\n          }\r\n        }\r\n      } else {\r\n        return {\r\n          id: node.id,\r\n          name: node.name,\r\n          symbolSize: size\r\n        }\r\n      }\r\n    })\r\n    console.log(1)\r\n    console.log(nodes[10])\r\n    // const nodes = useGraph.nodes\r\n    const links = useGraph.links.map(link => {\r\n      return {\r\n        id: link.id,\r\n        category: link.category,\r\n        source: link.source,\r\n        target: link.target,\r\n        lineStyle: {\r\n          color: this.edgeColorMap[link.category],\r\n          width: 2\r\n        },\r\n        label: {\r\n          color: this.edgeColorMap[link.category]\r\n        }\r\n      }\r\n    })\r\n\r\n    const option = ref({\r\n      backgroundColor: '#fff',\r\n      title: {\r\n        text: 'Company Relations',\r\n        subtext: 'See how companies relate with each other',\r\n        top: 'top',\r\n        left: 'center',\r\n        color: '#000'\r\n      },\r\n      tooltip: {},\r\n      animationDuration: 15000,\r\n      animationEasingUpdate: 'quinticInOut',\r\n      series: [\r\n        {\r\n          name: 'sample',\r\n          type: 'graph',\r\n          layout: 'force',\r\n          force: { // 力引导布局相关的配置项\r\n            repulsion: 80, // 节点之间的斥力因子\r\n            gravity: 0.02, // 节点受到的向中心的引力因子 越大越往中心靠拢\r\n            edgeLength: 240, // 边的两个节点之间的距离\r\n            layoutAnimation: false // 显示布局的迭代动画\r\n          },\r\n          focusNodeAdjacency: true,\r\n          edgeSymbol: ['none', 'none'],\r\n          data: nodes,\r\n          links,\r\n          roam: true,\r\n          label: {\r\n            color: '#000',\r\n            show: true,\r\n            position: 'right',\r\n            formatter: '{b}'\r\n          },\r\n          edgeLabel: { // 边的设置\r\n            show: true,\r\n            position: 'middle',\r\n            fontSize: 12,\r\n            formatter: (params) => {\r\n              return params.data.category\r\n            }\r\n          },\r\n          lineStyle: {\r\n            color: 'source',\r\n            curveness: 0.3\r\n          },\r\n          emphasis: {\r\n            focus: 'adjacency',\r\n            lineStyle: {\r\n              width: 10\r\n            }\r\n          }\r\n        }\r\n      ]\r\n    })\r\n\r\n    this.chart = option\r\n  },\r\n  mounted() {\r\n  const vchart = this.$refs.vchart;\r\n\r\n  vchart.on(\"click\", (params) => {\r\n    // Handle the node click event here\r\n    console.log(\"Node clicked:\", params);\r\n  });\r\n}\r\n})\r\n</script>\r\n\r\n<style scoped>\r\n.chart-container {\r\n  flex: 1;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.chart {\r\n  height: 75vh;\r\n}\r\n\r\n.graphSearch {\r\n  width: 20%;\r\n  padding-bottom: 10px;\r\n}\r\n</style>\r\n"],"mappings":"AAQA,SAAAA,GAAA;AACA,SAAAC,cAAA;AACA,SAAAC,UAAA;AACA,SACAC,cAAA,EACAC,gBAAA,EACAC,eAAA,QACA;AACA,OAAAC,MAAA,IAAAC,SAAA;AACA,SAAAC,GAAA,EAAAC,eAAA;AACA,OAAAC,gBAAA;AACA,OAAAC,gBAAA;AACA;;AAEAX,GAAA,EACAC,cAAA,EACAC,UAAA,EACAC,cAAA,EACAC,gBAAA,EACAC,eAAA,CACA;AAEA,eAAAI,eAAA;EACAG,IAAA;EACAC,UAAA;IACAP;EACA;EACAQ,OAAA;IACA,CAAAP,SAAA;EACA;EACAQ,KAAA;IACAC,WAAA;MACA,MAAAC,aAAA,QAAAC,QAAA,CAAAC,KAAA,CAAAC,MAAA,CACAC,IAAA,IAAAA,IAAA,CAAAT,IAAA,UAAAI,UACA;MACAM,OAAA,CAAAC,GAAA,CAAAN,aAAA;MACA,MAAAO,MAAA,QAAAC,KAAA,CAAAD,MAAA;MACA;;MAEA,IAAAP,aAAA,CAAAS,MAAA;QACA,MAAAC,OAAA,GAAAV,aAAA,CAAAW,GAAA,CAAAP,IAAA,IAAAA,IAAA,CAAAQ,EAAA;QACAL,MAAA,CAAAM,cAAA;UACAC,IAAA;UACAC,WAAA;UACAL;QACA;QACA;QACA;QACA;QACA;QACA;QACA;MACA;QACAH,MAAA,CAAAM,cAAA;UACAC,IAAA;UACAC,WAAA;QACA;MACA;IACA;EACA;EACAC,KAAA;IACA;MACAvB,gBAAA;MACAC,gBAAA;MACAK,UAAA;MACAkB,aAAA;QACAC,KAAA,EAAAxB,gBAAA;QACAyB,KAAA,EAAA1B;MACA;MACAQ,QAAA;MACAmB,UAAA,GACA;QAAAzB,IAAA;QAAA0B,KAAA;MAAA,GACA;QAAA1B,IAAA;QAAA0B,KAAA;MAAA,EACA;MACAC,YAAA;QACAC,OAAA;QACAC,KAAA;QACAC,WAAA;MACA;MACAC,KAAA;MACAC,WAAA,GACA;IAEA;EACA;EACA,MAAAC,QAAA;IACA;IACA;IACA,IAAAC,SAAA,QAAAC,MAAA,CAAAC,MAAA,CAAAF,SAAA;IACAA,SAAA,GAAAA,SAAA,SAAAZ,aAAA,CAAAY,SAAA,CAAAG,WAAA,MACA,KAAAF,MAAA,CAAAC,MAAA,CAAAF,SAAA,GACA;IACA,MAAA5B,QAAA,QAAAgB,aAAA,CAAAY,SAAA,CAAAG,WAAA;IACA,KAAA/B,QAAA,GAAAA,QAAA;IAEA,MAAAgC,SAAA,GAAAhC,QAAA,CAAAiC,KAAA,CAAAC,IAAA,EAAAC,CAAA,EAAAC,CAAA;MACA,MAAAC,SAAA,GAAAC,QAAA,CAAAH,CAAA,CAAAI,MAAA;MACA,MAAAC,SAAA,GAAAF,QAAA,CAAAF,CAAA,CAAAG,MAAA;MAEA,IAAAF,SAAA,GAAAG,SAAA;QACA;MACA,WAAAH,SAAA,GAAAG,SAAA;QACA;MACA;QACA;MACA;IACA;IACA,MAAAC,SAAA;IACAT,SAAA,CAAAU,OAAA,CAAAC,IAAA;MACA,KAAAF,SAAA,CAAAE,IAAA,CAAAJ,MAAA;QACAE,SAAA,CAAAE,IAAA,CAAAJ,MAAA;MACA;QACAE,SAAA,CAAAE,IAAA,CAAAJ,MAAA;MACA;IACA;IACA,MAAAtC,KAAA,GAAAD,QAAA,CAAAC,KAAA,CAAAS,GAAA,CAAAP,IAAA;MACA,IAAAyC,IAAA;MAEA,IAAAH,SAAA,CAAAtC,IAAA,CAAAQ,EAAA;QACAiC,IAAA,GAAAH,SAAA,CAAAtC,IAAA,CAAAQ,EAAA;MACA;MACA,SAAAe,WAAA,CAAAmB,QAAA,CAAA1C,IAAA,CAAAT,IAAA;QACA;UACAiB,EAAA,EAAAR,IAAA,CAAAQ,EAAA;UACAjB,IAAA,EAAAS,IAAA,CAAAT,IAAA;UACAoD,UAAA,EAAAF,IAAA;UACAG,UAAA;UACAC,SAAA;YACAC,WAAA;YACAC,WAAA;UACA;UACAC,KAAA;YACAC,QAAA;YACAC,UAAA;UACA;QACA;MACA;QACA;UACA1C,EAAA,EAAAR,IAAA,CAAAQ,EAAA;UACAjB,IAAA,EAAAS,IAAA,CAAAT,IAAA;UACAoD,UAAA,EAAAF;QACA;MACA;IACA;IACAxC,OAAA,CAAAC,GAAA;IACAD,OAAA,CAAAC,GAAA,CAAAJ,KAAA;IACA;IACA,MAAAgC,KAAA,GAAAjC,QAAA,CAAAiC,KAAA,CAAAvB,GAAA,CAAAiC,IAAA;MACA;QACAhC,EAAA,EAAAgC,IAAA,CAAAhC,EAAA;QACA2C,QAAA,EAAAX,IAAA,CAAAW,QAAA;QACAf,MAAA,EAAAI,IAAA,CAAAJ,MAAA;QACAgB,MAAA,EAAAZ,IAAA,CAAAY,MAAA;QACAC,SAAA;UACApC,KAAA,OAAAC,YAAA,CAAAsB,IAAA,CAAAW,QAAA;UACAG,KAAA;QACA;QACAN,KAAA;UACA/B,KAAA,OAAAC,YAAA,CAAAsB,IAAA,CAAAW,QAAA;QACA;MACA;IACA;IAEA,MAAAI,MAAA,GAAApE,GAAA;MACAqE,eAAA;MACAC,KAAA;QACAC,IAAA;QACAC,OAAA;QACAC,GAAA;QACAC,IAAA;QACA5C,KAAA;MACA;MACA6C,OAAA;MACAC,iBAAA;MACAC,qBAAA;MACAC,MAAA,GACA;QACA1E,IAAA;QACAmB,IAAA;QACAwD,MAAA;QACAC,KAAA;UAAA;UACAC,SAAA;UAAA;UACAC,OAAA;UAAA;UACAC,UAAA;UAAA;UACAC,eAAA;QACA;;QACAC,kBAAA;QACAC,UAAA;QACA7D,IAAA,EAAAd,KAAA;QACAgC,KAAA;QACA4C,IAAA;QACA1B,KAAA;UACA/B,KAAA;UACA0D,IAAA;UACAC,QAAA;UACAC,SAAA;QACA;QACAC,SAAA;UAAA;UACAH,IAAA;UACAC,QAAA;UACA3B,QAAA;UACA4B,SAAA,EAAAlD,MAAA;YACA,OAAAA,MAAA,CAAAf,IAAA,CAAAuC,QAAA;UACA;QACA;QACAE,SAAA;UACApC,KAAA;UACA8D,SAAA;QACA;QACAC,QAAA;UACAC,KAAA;UACA5B,SAAA;YACAC,KAAA;UACA;QACA;MACA;IAEA;IAEA,KAAAhC,KAAA,GAAAiC,MAAA;EACA;EACA2B,QAAA;IACA,MAAA/E,MAAA,QAAAC,KAAA,CAAAD,MAAA;IAEAA,MAAA,CAAAgF,EAAA,UAAAxD,MAAA;MACA;MACA1B,OAAA,CAAAC,GAAA,kBAAAyB,MAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}