{"ast":null,"code":"import { use } from 'echarts/core';\nimport { CanvasRenderer } from 'echarts/renderers';\nimport { GraphChart } from 'echarts/charts';\nimport { TitleComponent, TooltipComponent, LegendComponent } from 'echarts/components';\nimport VChart, { THEME_KEY } from 'vue-echarts';\nimport { ref, defineComponent } from 'vue';\nimport dow30SampleGraph from '@/assets/data/dow30_relation_backend.json';\nimport sp500SampleGraph from '@/assets/data/sp500_relation_backend.json';\nimport { getCompanyGraph } from '../api/company-graph';\nuse([CanvasRenderer, GraphChart, TitleComponent, TooltipComponent, LegendComponent]);\nexport default defineComponent({\n  name: 'PartialGraph',\n  components: {\n    VChart\n  },\n  provide: {\n    [THEME_KEY]: 'dark'\n  },\n  watch: {\n    searchTerm() {\n      const matchingNodes = this.useGraph.nodes.filter(node => node.name === this.searchTerm);\n      console.log(matchingNodes);\n      const vchart = this.$refs.vchart;\n      // const nodeData = chart.getOption().series[0].data.find(data => data.id === nodeId);\n\n      if (matchingNodes.length > 0) {\n        const nodeIds = matchingNodes.map(node => node.id);\n        vchart.dispatchAction({\n          type: 'highlight',\n          seriesIndex: 0,\n          nodeIds\n        });\n        // vchart.dispatchAction({\n        //   type: 'dataZoom',\n        //   dataZoomId: 'dataZoomX',\n        //   startValue: xValue - 50, // or any other value that centers the node\n        //   endValue: xValue + 50\n        // })\n      } else {\n        vchart.dispatchAction({\n          type: 'downplay',\n          seriesIndex: 0\n        });\n      }\n    }\n  },\n  methods: {\n    handleChartReady(chartInstance) {\n      chartInstance.on('click', this.handleNodeClick);\n      console.log(1);\n    },\n    handleNodeClick(params) {\n      // Handle the node click event here\n      console.log('Node clicked:', params.data);\n    }\n  },\n  data() {\n    return {\n      dow30SampleGraph,\n      sp500SampleGraph,\n      searchTerm: '',\n      defaultGraphs: {\n        SP500: sp500SampleGraph,\n        DOW30: dow30SampleGraph\n      },\n      useGraph: null,\n      edgeColors: [{\n        name: 'competition',\n        color: 'red'\n      }, {\n        name: 'unknown',\n        color: 'black'\n      }],\n      edgeColorMap: {\n        unknown: 'lightgrey',\n        other: 'lightgrey',\n        competition: 'black'\n      },\n      chart: null,\n      toEmphasize: ['MSFT', 'ZOOM', 'INTC', 'IBM', 'CSCO']\n    };\n  },\n  async created() {\n    try {\n      console.log(this.$route.params);\n      const graph = await getCompanyGraph(this.$route.params.id, this.$route.params.layers, this.$route.params.comp, this.$route.params.prod, this.$route.params.other, this.$route.params.unkown);\n      if (graph && graph.links && graph.nodes) {\n        console.log(graph);\n        // graphType = graphType && this.defaultGraphs[graphType.toUpperCase()]\n        //   ? this.$route.params.graphType\n        //   : 'DOW30'\n        const useGraph = graph;\n        this.useGraph = useGraph;\n        const nodeLinks = useGraph.links.sort((a, b) => {\n          const sourceIdA = parseInt(a.source);\n          const sourceIdB = parseInt(b.source);\n          if (sourceIdA < sourceIdB) {\n            return -1;\n          } else if (sourceIdA > sourceIdB) {\n            return 1;\n          } else {\n            return 0;\n          }\n        });\n        const linkCount = {};\n        nodeLinks.forEach(link => {\n          if (!linkCount[link.source]) {\n            linkCount[link.source] = 1;\n          } else {\n            linkCount[link.source] += 1;\n          }\n        });\n        const nodes = useGraph.nodes.map(node => {\n          let size = 10;\n          if (linkCount[node.id] > 10) {\n            size = linkCount[node.id];\n          }\n          if (this.toEmphasize.includes(node.name)) {\n            return {\n              id: node.id,\n              name: node.name,\n              symbolSize: size,\n              emphasized: true,\n              itemStyle: {\n                borderWidth: 4,\n                borderColor: 'red'\n              },\n              label: {\n                fontSize: '18px',\n                fontWeight: 'bolder'\n              }\n            };\n          } else {\n            return {\n              id: node.id,\n              name: node.name,\n              symbolSize: size\n            };\n          }\n        });\n        // const nodes = useGraph.nodes\n        const links = useGraph.links.map(link => {\n          return {\n            id: link.id,\n            category: link.category,\n            source: link.source,\n            target: link.target,\n            lineStyle: {\n              color: this.edgeColorMap[link.category],\n              width: 2\n            },\n            label: {\n              color: this.edgeColorMap[link.category]\n            }\n          };\n        });\n        const option = ref({\n          backgroundColor: '#fff',\n          title: {\n            text: 'Company Relations',\n            subtext: 'See how companies relate with each other',\n            top: 'top',\n            left: 'center',\n            color: '#000'\n          },\n          tooltip: {},\n          animationDuration: 150,\n          animationEasingUpdate: 'quinticInOut',\n          series: [{\n            name: 'sample',\n            type: 'graph',\n            layout: 'force',\n            force: {\n              // 力引导布局相关的配置项\n              repulsion: 80,\n              // 节点之间的斥力因子\n              gravity: 0.02,\n              // 节点受到的向中心的引力因子 越大越往中心靠拢\n              edgeLength: 240,\n              // 边的两个节点之间的距离\n              layoutAnimation: false // 显示布局的迭代动画\n            },\n\n            focusNodeAdjacency: true,\n            edgeSymbol: ['none', 'none'],\n            data: nodes,\n            links,\n            roam: true,\n            label: {\n              color: '#000',\n              show: true,\n              position: 'right',\n              formatter: '{b}'\n            },\n            edgeLabel: {\n              // 边的设置\n              show: true,\n              position: 'middle',\n              fontSize: 12,\n              formatter: params => {\n                return params.data.category;\n              }\n            },\n            lineStyle: {\n              color: 'source',\n              curveness: 0.3\n            },\n            emphasis: {\n              focus: 'adjacency',\n              lineStyle: {\n                width: 10\n              }\n            }\n          }]\n        });\n        this.chart = option;\n        // this.chart.on('click', (params) => {\n        //   // Handle the node click event here\n        //   console.log('Node clicked:', params)\n        // })\n      } else {\n        console.log('Invalid graph data');\n      }\n    } catch (error) {\n      console.error('Error fetching company graph:', error);\n    }\n  },\n  // const graph = null\n  mounted() {\n    this.$nextTick(() => {\n      const vchart = this.$refs.vchart;\n      vchart.chart.on('click', this.handleNodeClick);\n    });\n  }\n  // mounted () {\n  //   const vchart = this.$refs.vchart\n  // }\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}